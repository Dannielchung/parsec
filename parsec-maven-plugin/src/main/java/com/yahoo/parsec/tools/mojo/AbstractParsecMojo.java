package com.yahoo.parsec.tools.mojo;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

/**
 * @author sho
 */
public abstract class AbstractParsecMojo extends AbstractMojo {
    /**
     * Relative bin path.
     */
    private static final String RELATIVE_BIN_PATH = "target/bin";

    /**
     * Relative doc path.
     */
    private static final String RELATIVE_DOC_PATH = "target/generated-resources/parsec/doc";

    /**
     * Relative script path.
     */
    private static final String RELATIVE_SCRIPT_PATH = "parsec-bin";

    /**
     * Relative generated source path.
     */
    @Parameter( defaultValue="target/generated-sources/java" )
    protected String relativeGeneratedSourcesPath;

    /**
     * Relative Swagger-ui path.
     */
    private static final String RELATIVE_SWAGGER_UI_PATH = "target/generated-resources/parsec/swagger-ui";

    /**
     * Relative unit-test root path
     */
    private static final String RELATIVE_JAVA_TEST_ROOT_PATH = "src/test/java";

    /**
     * Relative rdl path
     */
    private static final String RELATIVE_RDL_PATH = "src/main/rdl";

    /**
     * The current Maven project.
     */
    @Parameter( defaultValue="${project}", required = true, readonly = true)
    protected MavenProject project;

    /**
     * Get project.
     *
     * @return current project
     */
    public MavenProject getProject() {
        return project;
    }

    /**
     * Get relative bin path.
     *
     * @return relative bin path
     */
    public String getRelativeBinPath() {
        return RELATIVE_BIN_PATH;
    }

    /**
     * Get relative doc path.
     *
     * @return relative doc path
     */
    public String getRelativeDocPath() {
        return RELATIVE_DOC_PATH;
    }

    /**
     * Get relative script path.
     *
     * @return relative script path
     */
    public String getRelativeScriptPath() {
        return RELATIVE_SCRIPT_PATH;
    }

    /**
     * Get relative generated sources path.
     *
     * @return relative generated sources path
     */
    public String getRelativeGeneratedSourcesDoc() {
        return relativeGeneratedSourcesPath;
    }

    /**
     * Get relative Swagger-ui path.
     *
     * @return relative script path
     */
    public String getRelativeSwaggerUIPath() {
        return RELATIVE_SWAGGER_UI_PATH;
    }

    /**
     * Get relative Java unit-test path.
     *
     * @return relative test path
     */
    public String getRelativeJavaTestRootPath() {
        return RELATIVE_JAVA_TEST_ROOT_PATH;
    }

    /**
     * Get bin path.
     *
     * @return bin path
     */
    public String getBinPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_BIN_PATH;
    }

    /**
     * Get doc path.
     *
     * @return doc path
     */
    public String getDocPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_DOC_PATH;
    }

    /**
     * Get generated sources path.
     *
     * @return generated sources path
     */
    public String getGeneratedSourcesPath() {
        return project.getBasedir().getPath() + "/" + relativeGeneratedSourcesPath;
    }

    /**
     * Get script path.
     *
     * @return script path
     */
    public String getScriptPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_SCRIPT_PATH;
    }

    /**
     * Get Swagger-ui path.
     *
     * @return script path
     */
    public String getSwaggerUIPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_SWAGGER_UI_PATH;
    }

    /**
     * Get Java Test Root Path.
     *
     * @return script path
     */
    public String getJavaTestRootPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_JAVA_TEST_ROOT_PATH;
    }

    /**
     * Get rdl path.
     *
     * @return java path
     */
    public String getRdlPath() {
        return project.getBasedir().getPath() + "/" + RELATIVE_RDL_PATH;
    }

    /**
     * Get overwrite warning comment block.
     *
     * @return overwrite warning comment block
     */
    public static String getOverwriteWarningCommentBlock() {
        StringBuilder stringBuilder = new StringBuilder()
            .append("/**")
            .append(System.getProperty("line.separator"))
            .append(" * This file is generated by Parsec Maven Plugin.")
            .append(System.getProperty("line.separator"))
            .append(" * Please DO NOT edit directly; changes could be overwritten.")
            .append(System.getProperty("line.separator"))
            .append(" */")
            .append(System.getProperty("line.separator"));

        return stringBuilder.toString();
    }
}
